apply plugin: 'maven-publish'
apply plugin: 'signing'

def sonatypeUsername = rootProject.hasProperty('sonatypeUsername')? rootProject.sonatypeUsername : ''
def sonatypePassword = rootProject.hasProperty('sonatypePassword')? rootProject.sonatypePassword : ''

version configs.libraryVersionName
group configs.groupId

task sourcesJar(type: Jar) {
  archiveClassifier.set("sources")
  from android.sourceSets.getByName("main").java.srcDirs
}

task javadoc(type: Javadoc) {
  options.addStringOption('Xdoclint:none', '-quiet')
  source = android.sourceSets.getByName("main").java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  excludes = ['**/*.kt']
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier.set("javadoc")
  from javadoc.destinationDir
}

afterEvaluate {
  publishing {
    publications {
      release(MavenPublication) {
        artifactId = configs.artifactId
        from components.release
        artifact javadocJar
        artifact sourcesJar
        pom {
          name = configs.artifactId
          description = configs.description
          url = configs.siteUrl
          licenses {
            license {
              name = configs.licenseName
              url = configs.licenseUrl
            }
          }
          developers {
            developer {
              id = configs.developerId
              name = configs.developerName
              email = configs.developerEmail
            }
          }
          scm {
            connection = configs.gitUrl
            developerConnection = configs.gitUrl
            url = configs.siteUrl
          }
        }
      }
    }
    repositories {
      maven {
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = "${sonatypeUsername}"
          password = "${sonatypePassword}"
        }
      }
    }
  }
}

signing {
  sign publishing.publications
}

javadoc {
  if (JavaVersion.current().isJava9Compatible()) {
    options.addBooleanOption('html5', true)
  }
}